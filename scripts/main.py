#!/usr/bin/env python3
"""
SCRIPT PRINCIPAL - Analyse des tendances d'alb√©do du glacier Saskatchewan
========================================================================

Ce script autonome effectue l'analyse compl√®te des tendances d'alb√©do.
Tous les modules sont dans le m√™me dossier - pas de probl√®mes d'imports !

POUR UTILISER :
1. Modifiez le chemin CSV_PATH ci-dessous si n√©cessaire
2. Appuyez sur F5 dans VS Code ou ex√©cutez : python main.py  
3. Consultez les r√©sultats dans le dossier results/

ANALYSES INCLUSES :
- Tests Mann-Kendall et Sen's slope pour toutes les fractions
- Graphiques mensuels (4 sous-graphiques demand√©s)
- Analyses saisonni√®res d√©taill√©es
- Visualisations compl√®tes (tendances, patterns, distributions)
- Exports Excel et texte avec tous les r√©sultats
"""

import os
import sys
from datetime import datetime
from pathlib import Path
import warnings
warnings.filterwarnings('ignore')

# Ajouter le r√©pertoire du projet au path pour trouver les modules
script_dir = Path(__file__).parent.absolute()
project_dir = script_dir.parent  # Remonte d'un niveau depuis scripts/

# Ajouter le r√©pertoire src au path pour les imports
src_dir = project_dir / 'src'
sys.path.insert(0, str(src_dir))

print(f"üìÇ R√©pertoire de travail actuel: {Path.cwd()}")
print(f"üìÅ R√©pertoire du projet: {project_dir}")
print(f"üìÅ R√©pertoire src: {src_dir}")

# Variable globale pour le r√©pertoire du projet
PROJECT_DIR = project_dir

# Imports des modules du package saskatchewan_albedo
try:
    from saskatchewan_albedo.config import CSV_PATH, OUTPUT_DIR, ANALYSIS_VARIABLE, print_config_summary
    from saskatchewan_albedo.data.handler import AlbedoDataHandler
    from saskatchewan_albedo.analysis.trends import TrendCalculator
    from saskatchewan_albedo.visualization.monthly import MonthlyVisualizer
    from saskatchewan_albedo.utils.helpers import print_section_header, ensure_directory_exists, print_analysis_summary
    print("‚úÖ Tous les modules import√©s avec succ√®s")
except ImportError as e:
    print(f"‚ùå Erreur d'import des modules: {e}")
    print(f"üìÅ V√©rifiez que tous les fichiers .py sont dans: {script_dir}")
    print("üìã Fichiers requis: config.py, data_handler.py, trend_calculator.py, monthly_visualizer.py, helpers.py")
    sys.exit(1)

def main():
    """
    Fonction principale d'analyse compl√®te
    """
    # En-t√™te
    print("üöÄ SASKATCHEWAN GLACIER ALBEDO TREND ANALYSIS")
    print("=" * 70)
    print("üìÖ Analyse lanc√©e le:", datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
    print()
    
    # Afficher la configuration
    print_config_summary()
    
    # V√©rifier le fichier CSV
    if not os.path.exists(CSV_PATH):
        print(f"\n‚ùå ERREUR : Fichier CSV non trouv√© !")
        print(f"   Chemin configur√© : {CSV_PATH}")
        print()
        print("üí° SOLUTION :")
        print(f"   Modifiez la variable CSV_PATH dans config.py")
        print("   ou placez votre fichier CSV avec le bon nom")
        return False
    
    print(f"‚úÖ Fichier CSV trouv√© : {CSV_PATH}")
    
    # Cr√©er le r√©pertoire de sortie (chemin absolu)
    output_path = PROJECT_DIR / OUTPUT_DIR
    ensure_directory_exists(str(output_path))
    print(f"üìÅ R√©pertoire de sortie : {output_path}/")
    print()
    
    try:
        # √âTAPE 1: Chargement et pr√©paration des donn√©es
        print_section_header("√âTAPE 1: Chargement des donn√©es", level=1)
        
        data_handler = AlbedoDataHandler(CSV_PATH)
        data_handler.load_data()
        data_handler.print_data_summary()
        
        # √âTAPE 2: Calculs statistiques de base  
        print_section_header("√âTAPE 2: Analyses de tendances de base", level=1)
        
        trend_calculator = TrendCalculator(data_handler)
        basic_results = trend_calculator.calculate_basic_trends(ANALYSIS_VARIABLE)
        trend_calculator.print_summary(ANALYSIS_VARIABLE)
        
        # √âTAPE 3: Analyses mensuelles
        print_section_header("√âTAPE 3: Analyses saisonni√®res et mensuelles", level=1)
        
        monthly_results = trend_calculator.calculate_monthly_trends(ANALYSIS_VARIABLE)
        
        # √âTAPE 4: VOS GRAPHIQUES MENSUELS DEMAND√âS
        print_section_header("√âTAPE 4: Cr√©ation des graphiques mensuels", level=1)
        
        monthly_visualizer = MonthlyVisualizer(data_handler)
        
        # Cr√©er les 4 graphiques mensuels que vous avez demand√©s
        monthly_graph_path = monthly_visualizer.create_monthly_statistics_graphs(
            ANALYSIS_VARIABLE, 
            str(output_path / f'monthly_statistics_{ANALYSIS_VARIABLE}.png')
        )
        
        if monthly_graph_path:
            print(f"üé® Vos graphiques mensuels cr√©√©s : {monthly_graph_path}")
        
        # Comparaison des tendances mensuelles
        if monthly_results:
            comparison_path = monthly_visualizer.create_seasonal_trends_comparison(
                monthly_results, ANALYSIS_VARIABLE,
                str(output_path / f'monthly_comparison_{ANALYSIS_VARIABLE}.png')
            )
            
            # R√©sum√© mensuel
            monthly_visualizer.print_monthly_summary(ANALYSIS_VARIABLE)
        
        # √âTAPE 5: Autres visualisations (optionnel)
        print_section_header("√âTAPE 5: Visualisations additionnelles", level=1)
        
        try:
            # Importer le module de visualisations si disponible
            from chart_generator import ChartGenerator
            
            chart_generator = ChartGenerator(data_handler)
            
            # Graphique d'aper√ßu des tendances
            overview_path = chart_generator.create_trend_overview_graph(
                basic_results, ANALYSIS_VARIABLE,
                str(output_path / f'trend_overview_{ANALYSIS_VARIABLE}.png')
            )
            
            # Patterns saisonniers
            patterns_path = chart_generator.create_seasonal_patterns_graph(
                ANALYSIS_VARIABLE,
                str(output_path / f'seasonal_patterns_{ANALYSIS_VARIABLE}.png')
            )
            
            print("‚úÖ Visualisations additionnelles cr√©√©es")
            
        except ImportError:
            print("‚ö†Ô∏è  Module de visualisations additionnelles non disponible")
        
        # √âTAPE 6: Exports des r√©sultats
        print_section_header("√âTAPE 6: Export des r√©sultats", level=1)
        
        try:
            # Export du tableau de r√©sum√©
            summary_table = trend_calculator.get_summary_table(ANALYSIS_VARIABLE)
            summary_csv_path = str(output_path / f'summary_trends_{ANALYSIS_VARIABLE}.csv')
            summary_table.to_csv(summary_csv_path, index=False)
            print(f"üìä Tableau de r√©sum√© export√© : {summary_csv_path}")
            
            # Export du tableau mensuel
            monthly_table = monthly_visualizer.create_monthly_summary_table(ANALYSIS_VARIABLE)
            if not monthly_table.empty:
                monthly_csv_path = str(output_path / f'monthly_stats_{ANALYSIS_VARIABLE}.csv')
                monthly_table.to_csv(monthly_csv_path, index=False)
                print(f"üìÖ Statistiques mensuelles export√©es : {monthly_csv_path}")
            
            # Export des donn√©es nettoy√©es
            cleaned_data_path = data_handler.export_cleaned_data(
                str(output_path / f'cleaned_data_{ANALYSIS_VARIABLE}.csv')
            )
            
        except Exception as e:
            print(f"‚ö†Ô∏è  Erreur lors des exports: {e}")
        
        # R√âSUM√â FINAL
        all_results = {
            'basic_trends': basic_results,
            'monthly_trends': monthly_results if 'monthly_results' in locals() else {},
            'data_summary': data_handler.get_data_summary()
        }
        
        print_analysis_summary(all_results)
        
        # Lister les fichiers g√©n√©r√©s
        print_section_header("FICHIERS G√âN√âR√âS", level=1)
        
        generated_files = []
        
        # V√©rifier quels fichiers ont √©t√© cr√©√©s
        output_files = [
            ('Graphiques mensuels (DEMAND√âS)', f'monthly_statistics_{ANALYSIS_VARIABLE}.png'),
            ('Comparaison mensuelle', f'monthly_comparison_{ANALYSIS_VARIABLE}.png'),
            ('Aper√ßu des tendances', f'trend_overview_{ANALYSIS_VARIABLE}.png'),
            ('Patterns saisonniers', f'seasonal_patterns_{ANALYSIS_VARIABLE}.png'),
            ('R√©sum√© des tendances', f'summary_trends_{ANALYSIS_VARIABLE}.csv'),
            ('Statistiques mensuelles', f'monthly_stats_{ANALYSIS_VARIABLE}.csv'),
            ('Donn√©es nettoy√©es', f'cleaned_data_{ANALYSIS_VARIABLE}.csv')
        ]
        
        for description, filename in output_files:
            filepath = output_path / filename
            if filepath.exists():
                size_kb = filepath.stat().st_size / 1024
                generated_files.append((description, str(filepath), size_kb))
                print(f"  ‚úÖ {description}: {filepath} ({size_kb:.1f} KB)")
        
        print(f"\nüéâ ANALYSE TERMIN√âE AVEC SUCC√àS !")
        print(f"üìÅ {len(generated_files)} fichiers g√©n√©r√©s dans: {output_path}/")
        print(f"üéØ GRAPHIQUES PRINCIPAUX √Ä CONSULTER :")
        print(f"   üìä monthly_statistics_{ANALYSIS_VARIABLE}.png - VOS GRAPHIQUES MENSUELS")
        print(f"   üìà trend_overview_{ANALYSIS_VARIABLE}.png - Vue d'ensemble des tendances")
        print(f"   üìÑ summary_trends_{ANALYSIS_VARIABLE}.csv - R√©sum√© des statistiques")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERREUR LORS DE L'ANALYSE :")
        print(f"   {e}")
        print(f"\nüîç D√©tails de l'erreur :")
        import traceback
        traceback.print_exc()
        
        print(f"\nüí° SUGGESTIONS :")
        print(f"   1. V√©rifiez le format de votre fichier CSV")
        print(f"   2. Assurez-vous que les colonnes d'alb√©do existent")
        print(f"   3. V√©rifiez l'espace disque disponible")
        print(f"   4. Installez les d√©pendances: pip install pandas numpy matplotlib seaborn scipy scikit-learn")
        
        return False

def test_imports():
    """
    Test rapide pour v√©rifier que tous les modules sont disponibles
    """
    print("‚ö° Test des modules...")
    
    try:
        import pandas as pd
        import numpy as np
        import matplotlib.pyplot as plt
        import seaborn as sns
        from scipy import stats
        print("‚úÖ D√©pendances principales OK")
        
        from saskatchewan_albedo.config import FRACTION_CLASSES
        from saskatchewan_albedo.utils.helpers import print_section_header
        print("‚úÖ Modules locaux OK")
        
        print(f"‚úÖ Configuration: {len(FRACTION_CLASSES)} fractions")
        return True
        
    except ImportError as e:
        print(f"‚ùå Erreur d'import: {e}")
        print("üí° Installez les d√©pendances:")
        print("   pip install pandas numpy matplotlib seaborn scipy scikit-learn")
        return False

def print_usage_info():
    """
    Affiche les informations d'utilisation
    """
    print("üìñ INFORMATIONS D'UTILISATION")
    print("=" * 40)
    print("Ce script effectue une analyse compl√®te automatis√©e.")
    print()
    print("üîß CONFIGURATION:")
    print(f"   ‚Ä¢ Fichier CSV: Modifiez CSV_PATH dans config.py")
    print(f"   ‚Ä¢ Variable: {ANALYSIS_VARIABLE} (modifiable dans config.py)")
    print(f"   ‚Ä¢ Sortie: {OUTPUT_DIR}/ (modifiable dans config.py)")
    print()
    print("üé® GRAPHIQUES G√âN√âR√âS:")
    print("   ‚Ä¢ Statistiques mensuelles (4 sous-graphiques)")
    print("   ‚Ä¢ Tendances par fraction")
    print("   ‚Ä¢ Patterns saisonniers")
    print("   ‚Ä¢ Comparaisons temporelles")
    print()
    print("üìä ANALYSES INCLUSES:")
    print("   ‚Ä¢ Tests Mann-Kendall pour toutes les fractions")
    print("   ‚Ä¢ Pentes de Sen avec intervalles de confiance")
    print("   ‚Ä¢ Analyses saisonni√®res d√©taill√©es")
    print("   ‚Ä¢ Statistiques descriptives compl√®tes")
    print("=" * 40)

if __name__ == "__main__":
    # Afficher les informations d'utilisation
    print_usage_info()
    print()
    
    # Test rapide des imports
    if not test_imports():
        print("‚ùå √âchec du test des modules")
        sys.exit(1)
    
    print("üöÄ Lancement de l'analyse principale...")
    print()
    
    # Analyse principale
    success = main()
    
    if success:
        print("\n" + "=" * 70)
        print("üéä ANALYSE TERMIN√âE AVEC SUCC√àS !")
        print("üìÇ Consultez le dossier de sortie pour tous les r√©sultats.")
        print("‚ú® Vos graphiques mensuels sont maintenant disponibles !")
        print("=" * 70)
    else:
        print("\n" + "=" * 70)
        print("üíî √âCHEC DE L'ANALYSE")
        print("üìû Consultez les messages d'erreur ci-dessus.")
        print("=" * 70)
        sys.exit(1)
#!/usr/bin/env python3
"""
SCRIPT PRINCIPAL - Analyse des tendances d'alb√©do du glacier Saskatchewan
========================================================================

Script interactif simple avec menu pour choisir les analyses √† effectuer.

POUR UTILISER DANS VS CODE:
1. Ouvrez ce fichier dans VS Code
2. Ex√©cutez le script avec Ctrl+F5 ou clic droit "Run Python File in Terminal"
3. Choisissez une option dans le menu qui appara√Æt
4. Consultez les r√©sultats dans le dossier results/

MENU:
1 = Analyse compl√®te (tout)
2 = Tendances seulement  
3 = Visualisations seulement
4 = Pixels/QA seulement
5 = Graphiques quotidiens seulement (NOUVEAU: inclut alb√©do quotidien!)
6 = Quitter
"""

import os
import sys
from datetime import datetime
from pathlib import Path

# Ajouter le r√©pertoire src au path
script_dir = Path(__file__).parent.absolute()
project_dir = script_dir.parent
src_dir = project_dir / 'src'
sys.path.insert(0, str(src_dir))

# Changer vers le r√©pertoire du projet pour que les chemins relatifs fonctionnent
os.chdir(project_dir)

print(f"üìÇ R√©pertoire de travail actuel: {Path.cwd()}")
print(f"üìÅ R√©pertoire du projet: {project_dir}")

# Import de la configuration et des fonctions d'analyse
try:
    from saskatchewan_albedo.config import print_config_summary
    from saskatchewan_albedo.scripts.analysis_functions import (check_config, run_complete_analysis, run_trends_only, 
                                                               run_visualizations_only, run_pixels_only, run_daily_only)
    print("‚úÖ Modules import√©s avec succ√®s")
except ImportError as e:
    print(f"‚ùå Erreur d'import: {e}")
    sys.exit(1)

def show_menu():
    """Affiche le menu principal organis√© par produit MODIS"""
    print("\n" + "="*70)
    print("üöÄ MENU D'ANALYSE - SASKATCHEWAN GLACIER ALBEDO")
    print("="*70)
    print()
    print("üìä PRODUITS MODIS:")
    print("1Ô∏è‚É£  MCD43A3 - Alb√©do g√©n√©ral (MODIS Combined)")
    print("2Ô∏è‚É£  MOD10A1 - Alb√©do de neige (Terra Snow Cover)")
    print()
    print("üîÑ COMPARAISON:")
    print("3Ô∏è‚É£  Comparaison MCD43A3 vs MOD10A1")
    print()
    print("4Ô∏è‚É£  Quitter")
    print()
    print("-" * 70)

def get_choice():
    """Obtient le choix de l'utilisateur pour le menu principal"""
    print("\n" + "="*50)
    print("S√âLECTION DU PRODUIT")
    print("="*50)
    print()
    print("Choisissez le produit MODIS √† analyser:")
    print("1 = MCD43A3 (Alb√©do g√©n√©ral)")
    print("2 = MOD10A1 (Alb√©do de neige)")
    print("3 = Comparaison des deux")
    print("4 = Quitter")
    print()
    
    while True:
        try:
            choice = input("‚û§ Votre choix (1-4): ").strip()
            if choice in ['1', '2', '3', '4']:
                return int(choice)
            else:
                print(f"‚ùå '{choice}' n'est pas valide. Tapez un chiffre de 1 √† 4.")
        except KeyboardInterrupt:
            print("\n\nüëã Interruption. Au revoir!")
            return 4
        except:
            print("‚ùå Erreur de saisie. Tapez un chiffre de 1 √† 4.")

def get_dataset_choice():
    """Permet √† l'utilisateur de choisir un dataset sp√©cifique"""
    print("\n" + "="*50)
    print("CHOIX DU DATASET")
    print("="*50)
    print()
    print("1Ô∏è‚É£  MCD43A3 - Alb√©do g√©n√©ral (MODIS Combined)")
    print("2Ô∏è‚É£  MOD10A1 - Alb√©do de neige (Terra Snow Cover)")
    print()
    
    while True:
        try:
            choice = input("‚û§ Choisissez le dataset (1-2): ").strip()
            if choice == '1':
                return 'MCD43A3'
            elif choice == '2':
                return 'MOD10A1'
            else:
                print(f"‚ùå '{choice}' n'est pas valide. Tapez 1 ou 2.")
        except KeyboardInterrupt:
            print("\n\nüëã Interruption.")
            return None
        except:
            print("‚ùå Erreur de saisie. Tapez 1 ou 2.")

def show_dataset_menu(dataset_name):
    """Affiche le sous-menu pour un dataset sp√©cifique"""
    dataset_info = {
        'MCD43A3': 'üåç MCD43A3 - Alb√©do g√©n√©ral (MODIS Combined)',
        'MOD10A1': '‚ùÑÔ∏è MOD10A1 - Alb√©do de neige (Terra Snow Cover)'
    }
    
    print("\n" + "="*60)
    print(f"ANALYSES POUR {dataset_info.get(dataset_name, dataset_name)}")
    print("="*60)
    print()
    print("1Ô∏è‚É£  Analyse compl√®te (toutes les √©tapes)")
    print("2Ô∏è‚É£  Tendances statistiques seulement")
    print("3Ô∏è‚É£  Visualisations seulement")
    print("4Ô∏è‚É£  Analyse pixels/QA seulement")
    print("5Ô∏è‚É£  Graphiques quotidiens (daily_melt_season)")
    
    # Option sp√©ciale pour MOD10A1 seulement
    if dataset_name == 'MOD10A1':
        print("6Ô∏è‚É£  Comparaison entre fractions MOD10A1 üÜï")
        print()
        print("7Ô∏è‚É£  Retour au menu principal")
    else:
        print()
        print("6Ô∏è‚É£  Retour au menu principal")
    
    print()
    print("-" * 60)

def get_dataset_analysis_choice(dataset_name=None):
    """Obtient le choix d'analyse pour un dataset"""
    print("\n" + "="*40)
    print("TYPE D'ANALYSE")
    print("="*40)
    print()
    
    # D√©terminer le nombre maximum d'options selon le dataset
    max_choice = 7 if dataset_name == 'MOD10A1' else 6
    max_choice_str = f"1-{max_choice}"
    valid_choices = [str(i) for i in range(1, max_choice + 1)]
    
    while True:
        try:
            choice = input(f"‚û§ Votre choix ({max_choice_str}): ").strip()
            if choice in valid_choices:
                return int(choice)
            else:
                print(f"‚ùå '{choice}' n'est pas valide. Tapez un chiffre de {max_choice_str}.")
        except KeyboardInterrupt:
            print("\n\nüëã Interruption.")
            return max_choice  # Retour au menu principal
        except:
            print(f"‚ùå Erreur de saisie. Tapez un chiffre de {max_choice_str}.")

def show_comparison_menu():
    """Affiche le sous-menu pour la comparaison"""
    print("\n" + "="*60)
    print("üîÑ COMPARAISON MCD43A3 vs MOD10A1")
    print("="*60)
    print()
    print("1Ô∏è‚É£  Comparaison compl√®te (corr√©lations + diff√©rences + tendances)")
    print("2Ô∏è‚É£  Corr√©lations seulement")
    print("3Ô∏è‚É£  Visualisations comparatives seulement")
    print("4Ô∏è‚É£  Graphiques quotidiens par saison de fonte")
    print()
    print("5Ô∏è‚É£  Retour au menu principal")
    print()
    print("-" * 60)

def get_comparison_analysis_choice():
    """Obtient le choix d'analyse pour la comparaison"""
    print("\n" + "="*40)
    print("TYPE DE COMPARAISON")
    print("="*40)
    print()
    
    while True:
        try:
            choice = input("‚û§ Votre choix (1-5): ").strip()
            if choice in ['1', '2', '3', '4', '5']:
                return int(choice)
            else:
                print(f"‚ùå '{choice}' n'est pas valide. Tapez un chiffre de 1 √† 5.")
        except KeyboardInterrupt:
            print("\n\nüëã Interruption.")
            return 5
        except:
            print("‚ùå Erreur de saisie. Tapez un chiffre de 1 √† 5.")

def _get_fraction_choice():
    """Permet √† l'utilisateur de choisir la fraction √† analyser"""
    from saskatchewan_albedo.config import FRACTION_CLASSES, CLASS_LABELS
    
    print("\n" + "="*50)
    print("üîç CHOIX DE LA FRACTION √Ä ANALYSER")
    print("="*50)
    print()
    
    for i, fraction in enumerate(FRACTION_CLASSES, 1):
        print(f"{i}Ô∏è‚É£  {CLASS_LABELS[fraction]}")
    print()
    print("-" * 50)
    
    while True:
        try:
            choice = input(f"‚û§ Votre choix (1-{len(FRACTION_CLASSES)}): ").strip()
            choice_num = int(choice)
            if 1 <= choice_num <= len(FRACTION_CLASSES):
                selected_fraction = FRACTION_CLASSES[choice_num - 1]
                print(f"‚úÖ Fraction s√©lectionn√©e: {CLASS_LABELS[selected_fraction]}")
                return selected_fraction
            else:
                print(f"‚ùå '{choice}' n'est pas valide. Tapez un chiffre de 1 √† {len(FRACTION_CLASSES)}.")
        except KeyboardInterrupt:
            print("\n\nüëã Interruption.")
            return 'pure_ice'  # Valeur par d√©faut
        except ValueError:
            print(f"‚ùå Erreur de saisie. Tapez un chiffre de 1 √† {len(FRACTION_CLASSES)}.")
        except:
            print(f"‚ùå Erreur de saisie. Tapez un chiffre de 1 √† {len(FRACTION_CLASSES)}.")

def main():
    """Fonction principale avec support multi-datasets"""
    print("\n" + "="*70)
    print("üöÄ SASKATCHEWAN GLACIER ALBEDO TREND ANALYSIS")
    print("="*70)
    print("üìÖ Session lanc√©e le:", datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
    
    # Afficher la configuration g√©n√©rale et v√©rifier les datasets
    print_config_summary()
    
    # Importer les nouvelles fonctions
    try:
        from saskatchewan_albedo.scripts.analysis_functions import (
            run_dataset_analysis, run_comparison_analysis, run_correlation_analysis,
            run_custom_analysis, run_comparative_visualizations, run_export_all,
            check_datasets_availability
        )
    except ImportError as e:
        print(f"‚ùå Erreur d'import des nouvelles fonctions: {e}")
        print("üìù Utilisation du mode de compatibilit√©...")
        from saskatchewan_albedo.scripts.analysis_functions import (
            run_complete_analysis, run_trends_only, run_visualizations_only,
            run_pixels_only, run_daily_only
        )
        # Mode de compatibilit√© avec l'ancien menu
        _run_legacy_mode()
        return
    
    # V√©rifier la disponibilit√© des datasets
    if not check_datasets_availability():
        print("\n‚ùå Aucun dataset valide trouv√©.")
        return
    
    while True:
        show_menu()
        choice = get_choice()
        
        try:
            if choice == 1:
                # Sous-menu MCD43A3
                _handle_dataset_menu('MCD43A3')
                
            elif choice == 2:
                # Sous-menu MOD10A1
                _handle_dataset_menu('MOD10A1')
                
            elif choice == 3:
                # Sous-menu Comparaison
                _handle_comparison_menu()
                
            elif choice == 4:
                print("\nüëã Au revoir!")
                break
            
        except Exception as e:
            print(f"\n‚ùå Erreur lors de l'ex√©cution: {e}")
            print("üìù Consultez les logs pour plus de d√©tails.")

def _handle_dataset_menu(dataset_name):
    """G√®re le sous-menu pour un dataset sp√©cifique"""
    from saskatchewan_albedo.scripts.analysis_functions import (
        run_dataset_analysis, run_custom_analysis
    )
    
    while True:
        show_dataset_menu(dataset_name)
        choice = get_dataset_analysis_choice(dataset_name)
        
        # G√©rer le retour au menu principal selon le dataset
        if (dataset_name == 'MOD10A1' and choice == 7) or (dataset_name != 'MOD10A1' and choice == 6):
            break
            
        try:
            if choice == 1:
                # Analyse compl√®te
                print(f"\nüîç Analyse compl√®te du dataset {dataset_name}...")
                run_dataset_analysis(dataset_name)
                
            elif choice == 2:
                # Tendances seulement
                print(f"\nüìà Analyse des tendances pour {dataset_name}...")
                run_custom_analysis(dataset_name, 2)
                
            elif choice == 3:
                # Visualisations seulement
                print(f"\nüé® G√©n√©ration des visualisations pour {dataset_name}...")
                run_custom_analysis(dataset_name, 3)
                
            elif choice == 4:
                # Pixels/QA seulement
                print(f"\nüîç Analyse pixels/QA pour {dataset_name}...")
                run_custom_analysis(dataset_name, 4)
                
            elif choice == 5:
                # Graphiques quotidiens
                print(f"\nüìÖ Graphiques quotidiens pour {dataset_name}...")
                run_custom_analysis(dataset_name, 5)
                
            elif choice == 6 and dataset_name == 'MOD10A1':
                # Comparaison entre fractions MOD10A1 (option sp√©ciale)
                print(f"\nüîç Comparaison entre fractions MOD10A1...")
                from saskatchewan_albedo.scripts.analysis_functions import run_mod10a1_fraction_comparison
                run_mod10a1_fraction_comparison()
                
        except Exception as e:
            print(f"\n‚ùå Erreur lors de l'analyse {dataset_name}: {e}")
        
        print("\n" + "="*50)
        try:
            cont = input("‚û§ Autre analyse pour ce dataset? (o/n): ").strip().lower()
            if cont not in ['o', 'oui', 'y', 'yes']:
                break
        except KeyboardInterrupt:
            break
        except:
            break

def _handle_comparison_menu():
    """G√®re le sous-menu pour la comparaison"""
    from saskatchewan_albedo.scripts.analysis_functions import (
        run_comparison_analysis, run_correlation_analysis, run_comparative_visualizations
    )
    
    while True:
        show_comparison_menu()
        choice = get_comparison_analysis_choice()
        
        if choice == 5:  # Retour au menu principal
            break
            
        try:
            if choice == 1:
                # Comparaison compl√®te
                print("\nüîÑ Comparaison compl√®te MCD43A3 vs MOD10A1...")
                run_comparison_analysis()
                
            elif choice == 2:
                # Corr√©lations seulement
                print("\nüìä Analyse de corr√©lation entre produits...")
                run_correlation_analysis()
                
            elif choice == 3:
                # Visualisations comparatives
                print("\nüìà G√©n√©ration des visualisations comparatives...")
                run_comparative_visualizations()
                
            elif choice == 4:
                # Graphiques quotidiens par saison de fonte
                print("\nüìÖ Graphiques quotidiens par saison de fonte...")
                # Demander la fraction √† analyser
                fraction_choice = _get_fraction_choice()
                from saskatchewan_albedo.scripts.analysis_functions import run_daily_melt_season_comparison
                run_daily_melt_season_comparison(fraction_choice)
                
        except Exception as e:
            print(f"\n‚ùå Erreur lors de la comparaison: {e}")
        
        print("\n" + "="*50)
        try:
            cont = input("‚û§ Autre analyse comparative? (o/n): ").strip().lower()
            if cont not in ['o', 'oui', 'y', 'yes']:
                break
        except KeyboardInterrupt:
            break
        except:
            break

def _run_legacy_mode():
    """Mode de compatibilit√© avec l'ancien menu"""
    print("\n‚ö†Ô∏è Mode de compatibilit√© activ√© - Menu simplifi√©")
    
    from saskatchewan_albedo.scripts.analysis_functions import (
        run_complete_analysis, run_trends_only, run_visualizations_only,
        run_pixels_only, run_daily_only
    )
    
    while True:
        print("\n" + "="*60)
        print("üöÄ MENU SIMPLIFI√â")
        print("="*60)
        print("1Ô∏è‚É£  Analyse compl√®te")
        print("2Ô∏è‚É£  Tendances seulement")
        print("3Ô∏è‚É£  Visualisations")
        print("4Ô∏è‚É£  Pixels/QA")
        print("5Ô∏è‚É£  Graphiques quotidiens")
        print("6Ô∏è‚É£  Quitter")
        
        try:
            choice = input("\n‚û§ Votre choix (1-6): ").strip()
            
            if choice == '1':
                run_complete_analysis()
            elif choice == '2':
                run_trends_only()
            elif choice == '3':
                run_visualizations_only()
            elif choice == '4':
                run_pixels_only()
            elif choice == '5':
                run_daily_only()
            elif choice == '6':
                break
            else:
                print("‚ùå Choix invalide")
                
        except KeyboardInterrupt:
            print("\nüëã Au revoir!")
            break

if __name__ == "__main__":
    main()
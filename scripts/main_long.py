#!/usr/bin/env python3
"""
SCRIPT PRINCIPAL INTERACTIF - Pour VS Code Interactive Window
============================================================

Ce script fonctionne exactement comme l'ancien main_backup.py mais avec
des options de menu simples pour VS Code.

POUR UTILISER DANS VS CODE:
1. Ouvrez ce fichier dans VS Code
2. Ex√©cutez le script avec Ctrl+F5 ou clic droit "Run Python File in Terminal"
3. Choisissez une option dans le menu qui appara√Æt
4. Consultez les r√©sultats dans le dossier results/

MENU:
1 = Analyse compl√®te (tout)
2 = Tendances seulement  
3 = Visualisations seulement
4 = Pixels/QA seulement
5 = Graphiques quotidiens seulement
6 = Quitter
"""

import os
import sys
from datetime import datetime
from pathlib import Path
import warnings
warnings.filterwarnings('ignore')

# Set matplotlib to non-interactive backend to prevent blocking
import matplotlib
matplotlib.use('Agg')

# Ajouter le r√©pertoire du projet au path pour trouver les modules
script_dir = Path(__file__).parent.absolute()
project_dir = script_dir.parent  # Remonte d'un niveau depuis scripts/

# Ajouter le r√©pertoire src au path pour les imports
src_dir = project_dir / 'src'
sys.path.insert(0, str(src_dir))

print(f"üìÇ R√©pertoire de travail actuel: {Path.cwd()}")
print(f"üìÅ R√©pertoire du projet: {project_dir}")
print(f"üìÅ R√©pertoire src: {src_dir}")

# Variable globale pour le r√©pertoire du projet
PROJECT_DIR = project_dir

# Imports des modules du package saskatchewan_albedo
try:
    from saskatchewan_albedo.config import (CSV_PATH, QA_CSV_PATH, OUTPUT_DIR, ANALYSIS_VARIABLE, 
                                           print_config_summary, FRACTION_CLASSES, CLASS_LABELS, FRACTION_COLORS)
    from saskatchewan_albedo.data.handler import AlbedoDataHandler
    from saskatchewan_albedo.analysis.trends import TrendCalculator
    from saskatchewan_albedo.analysis.pixel_analysis import PixelCountAnalyzer
    from saskatchewan_albedo.visualization.monthly import MonthlyVisualizer
    from saskatchewan_albedo.visualization.pixel_plots import PixelVisualizer
    from saskatchewan_albedo.visualization.charts import ChartGenerator
    from saskatchewan_albedo.utils.helpers import print_section_header, ensure_directory_exists, print_analysis_summary
    print("‚úÖ Tous les modules import√©s avec succ√®s")
except ImportError as e:
    print(f"‚ùå Erreur d'import des modules: {e}")
    print(f"üìÅ V√©rifiez que tous les fichiers sont pr√©sents dans: {src_dir}")
    sys.exit(1)

def show_menu():
    """Affiche le menu d'options"""
    print("\n" + "="*60)
    print("üöÄ MENU D'ANALYSE - CHOISISSEZ UNE OPTION")
    print("="*60)
    print()
    print("1Ô∏è‚É£  Analyse compl√®te (toutes les √©tapes)")
    print("2Ô∏è‚É£  Analyses de tendances et statistiques")
    print("3Ô∏è‚É£  Visualisations standards") 
    print("4Ô∏è‚É£  Analyse des pixels et QA")
    print("5Ô∏è‚É£  Graphiques de s√©ries temporelles quotidiennes")
    print("6Ô∏è‚É£  Quitter")
    print()
    print("-" * 60)

def get_choice():
    """Obtient le choix de l'utilisateur de mani√®re simple"""
    print("\n" + "="*60)
    print("S√âLECTION DE L'ANALYSE")
    print("="*60)
    print()
    print("Tapez le num√©ro de votre choix puis appuyez sur Entr√©e:")
    print("1 = Analyse compl√®te")
    print("2 = Tendances")
    print("3 = Visualisations")
    print("4 = Pixels/QA")
    print("5 = Graphiques quotidiens")
    print("6 = Quitter")
    print()
    
    while True:
        try:
            choice = input("‚û§ Votre choix (1-6): ").strip()
            if choice in ['1', '2', '3', '4', '5', '6']:
                return int(choice)
            else:
                print(f"‚ùå '{choice}' n'est pas valide. Tapez un chiffre de 1 √† 6.")
        except KeyboardInterrupt:
            print("\n\nüëã Interruption. Au revoir!")
            return 6
        except:
            print("‚ùå Erreur de saisie. Tapez un chiffre de 1 √† 6.")

def check_config():
    """V√©rifie la configuration"""
    print("\n‚öôÔ∏è  V√âRIFICATION DE LA CONFIGURATION")
    print("="*50)
    
    if not os.path.exists(CSV_PATH):
        print(f"‚ùå ERREUR : Fichier CSV non trouv√© !")
        print(f"   Chemin configur√© : {CSV_PATH}")
        print(f"\nüí° SOLUTION :")
        print(f"   Modifiez la variable CSV_PATH dans config.py")
        return False
    
    print(f"‚úÖ Fichier CSV principal trouv√© : {CSV_PATH}")
    
    if QA_CSV_PATH and os.path.exists(QA_CSV_PATH):
        print(f"‚úÖ Fichier QA CSV trouv√© : {QA_CSV_PATH}")
    else:
        print(f"‚ö†Ô∏è  Fichier QA CSV non trouv√© (analyse QA 0-3 non disponible)")
    
    output_path = PROJECT_DIR / OUTPUT_DIR
    ensure_directory_exists(str(output_path))
    print(f"üìÅ R√©pertoire de sortie : {output_path}/")
    
    return True

def run_complete_analysis():
    """Ex√©cute l'analyse compl√®te (comme main_backup.py)"""
    output_path = PROJECT_DIR / OUTPUT_DIR
    
    try:
        print_section_header("ANALYSE COMPL√àTE - TOUTES LES √âTAPES", level=1)
        
        # √âTAPE 1: Chargement des donn√©es
        print_section_header("√âTAPE 1: Chargement des donn√©es", level=1)
        data_handler = AlbedoDataHandler(CSV_PATH)
        data_handler.load_data()
        data_handler.print_data_summary()
        
        # √âTAPE 2: Calculs statistiques de base  
        print_section_header("√âTAPE 2: Analyses de tendances de base", level=1)
        trend_calculator = TrendCalculator(data_handler)
        basic_results = trend_calculator.calculate_basic_trends(ANALYSIS_VARIABLE)
        trend_calculator.print_summary(ANALYSIS_VARIABLE)
        
        # √âTAPE 3: Analyses mensuelles
        print_section_header("√âTAPE 3: Analyses saisonni√®res et mensuelles", level=1)
        monthly_results = trend_calculator.calculate_monthly_trends(ANALYSIS_VARIABLE)
        
        # √âTAPE 4: Graphiques mensuels
        print_section_header("√âTAPE 4: Cr√©ation des graphiques mensuels", level=1)
        monthly_visualizer = MonthlyVisualizer(data_handler)
        
        monthly_graph_path = monthly_visualizer.create_monthly_statistics_graphs(
            ANALYSIS_VARIABLE, 
            str(output_path / f'monthly_statistics_{ANALYSIS_VARIABLE}.png')
        )
        
        if monthly_graph_path:
            print(f"üé® Graphiques mensuels cr√©√©s : {monthly_graph_path}")
        
        if monthly_results:
            comparison_path = monthly_visualizer.create_seasonal_trends_comparison(
                monthly_results, ANALYSIS_VARIABLE,
                str(output_path / f'monthly_comparison_{ANALYSIS_VARIABLE}.png')
            )
            monthly_visualizer.print_monthly_summary(ANALYSIS_VARIABLE)
        
        # √âTAPE 5: Autres visualisations
        print_section_header("√âTAPE 5: Visualisations additionnelles", level=1)
        try:
            chart_generator = ChartGenerator(data_handler)
            
            overview_path = chart_generator.create_trend_overview_graph(
                basic_results, ANALYSIS_VARIABLE,
                str(output_path / f'trend_overview_{ANALYSIS_VARIABLE}.png')
            )
            
            patterns_path = chart_generator.create_seasonal_patterns_graph(
                ANALYSIS_VARIABLE,
                str(output_path / f'seasonal_patterns_{ANALYSIS_VARIABLE}.png')
            )
            
            print("‚úÖ Visualisations additionnelles cr√©√©es")
        except Exception as e:
            print(f"‚ö†Ô∏è  Erreur visualisations additionnelles: {e}")
        
        # √âTAPE 6: Analyse des pixels
        print_section_header("√âTAPE 6: Analyse des comptages de pixels", level=1)
        try:
            pixel_analyzer = PixelCountAnalyzer(data_handler, qa_csv_path=QA_CSV_PATH)
            
            monthly_pixel_results = pixel_analyzer.analyze_monthly_pixel_counts()
            true_qa_results = pixel_analyzer.analyze_true_qa_statistics()
            qa_results = pixel_analyzer.analyze_seasonal_qa_statistics()
            total_pixel_results = pixel_analyzer.analyze_total_pixel_trends()
            
            print("‚úÖ Analyses de pixels termin√©es")
        except Exception as e:
            print(f"‚ö†Ô∏è  Erreur analyse pixels: {e}")
            monthly_pixel_results = {}
            true_qa_results = {}
            qa_results = {}
            total_pixel_results = {}
        
        # √âTAPE 7: Visualisations pixels/QA
        print_section_header("√âTAPE 7: Visualisations des pixels et QA", level=1)
        try:
            pixel_visualizer = PixelVisualizer(data_handler)
            
            if monthly_pixel_results:
                pixel_visualizer.create_monthly_pixel_count_plots(
                    monthly_pixel_results,
                    str(output_path / 'pixel_counts_by_month_fraction.png')
                )
            
            if true_qa_results:
                pixel_visualizer.create_true_qa_plots(
                    true_qa_results,
                    str(output_path / 'true_qa_scores_analysis.png')
                )
            
            if qa_results:
                pixel_visualizer.create_qa_statistics_plots(
                    qa_results,
                    str(output_path / 'qa_statistics_by_season.png')
                )
            
            if monthly_pixel_results and qa_results:
                pixel_visualizer.create_pixel_availability_heatmap(
                    monthly_pixel_results, qa_results,
                    str(output_path / 'pixel_availability_heatmap.png')
                )
            
            if total_pixel_results:
                pixel_visualizer.create_total_pixels_timeseries(
                    total_pixel_results,
                    str(output_path / 'total_pixels_timeseries.png')
                )
            
            print("‚úÖ Visualisations de pixels cr√©√©es")
        except Exception as e:
            print(f"‚ö†Ô∏è  Erreur visualisations pixels: {e}")
        
        # √âTAPE 8: Graphiques quotidiens
        print_section_header("√âTAPE 8: Graphiques quotidiens par saison de fonte", level=1)
        try:
            # Graphiques quotidiens pixels/QA
            if 'pixel_analyzer' in locals() and 'pixel_visualizer' in locals():
                daily_plots = pixel_visualizer.create_daily_melt_season_plots(
                    pixel_analyzer, 
                    str(output_path)
                )
                print(f"‚úÖ {len(daily_plots)} graphiques quotidiens pixels/QA cr√©√©s")
            
            # Graphiques quotidiens d'alb√©do
            albedo_plots = create_daily_albedo_plots(data_handler, str(output_path))
            print(f"‚úÖ {len(albedo_plots)} graphiques quotidiens d'alb√©do cr√©√©s")
            
        except Exception as e:
            print(f"‚ö†Ô∏è  Erreur graphiques quotidiens: {e}")
        
        # √âTAPE 9: Exports
        print_section_header("√âTAPE 9: Export des r√©sultats", level=1)
        try:
            summary_table = trend_calculator.get_summary_table(ANALYSIS_VARIABLE)
            summary_csv_path = str(output_path / f'summary_trends_{ANALYSIS_VARIABLE}.csv')
            summary_table.to_csv(summary_csv_path, index=False)
            print(f"üìä Tableau de r√©sum√© export√© : {summary_csv_path}")
            
            monthly_table = monthly_visualizer.create_monthly_summary_table(ANALYSIS_VARIABLE)
            if not monthly_table.empty:
                monthly_csv_path = str(output_path / f'monthly_stats_{ANALYSIS_VARIABLE}.csv')
                monthly_table.to_csv(monthly_csv_path, index=False)
                print(f"üìÖ Statistiques mensuelles export√©es : {monthly_csv_path}")
            
            cleaned_data_path = data_handler.export_cleaned_data(
                str(output_path / f'cleaned_data_{ANALYSIS_VARIABLE}.csv')
            )
            
            if 'pixel_analyzer' in locals():
                pixel_exports = pixel_analyzer.export_pixel_analysis_results(str(output_path))
        except Exception as e:
            print(f"‚ö†Ô∏è  Erreur exports: {e}")
        
        # R√âSUM√â FINAL
        all_results = {
            'basic_trends': basic_results,
            'monthly_trends': monthly_results,
            'data_summary': data_handler.get_data_summary()
        }
        
        print_analysis_summary(all_results)
        
        print_section_header("FICHIERS G√âN√âR√âS", level=1)
        list_files(output_path)
        
        print("\nüéâ ANALYSE COMPL√àTE TERMIN√âE AVEC SUCC√àS !")
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERREUR LORS DE L'ANALYSE : {e}")
        import traceback
        traceback.print_exc()
        return False

def run_trends_only():
    """Ex√©cute seulement les analyses de tendances"""
    output_path = PROJECT_DIR / OUTPUT_DIR
    
    try:
        print_section_header("ANALYSES DE TENDANCES SEULEMENT", level=1)
        
        data_handler = AlbedoDataHandler(CSV_PATH)
        data_handler.load_data()
        data_handler.print_data_summary()
        
        trend_calculator = TrendCalculator(data_handler)
        basic_results = trend_calculator.calculate_basic_trends(ANALYSIS_VARIABLE)
        trend_calculator.print_summary(ANALYSIS_VARIABLE)
        
        monthly_results = trend_calculator.calculate_monthly_trends(ANALYSIS_VARIABLE)
        
        # Export
        summary_table = trend_calculator.get_summary_table(ANALYSIS_VARIABLE)
        summary_csv_path = str(output_path / f'summary_trends_{ANALYSIS_VARIABLE}.csv')
        summary_table.to_csv(summary_csv_path, index=False)
        print(f"üìä Tableau de r√©sum√© export√© : {summary_csv_path}")
        
        all_results = {
            'basic_trends': basic_results,
            'monthly_trends': monthly_results,
            'data_summary': data_handler.get_data_summary()
        }
        print_analysis_summary(all_results)
        
        print("\n‚úÖ ANALYSES DE TENDANCES TERMIN√âES !")
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERREUR : {e}")
        import traceback
        traceback.print_exc()
        return False

def run_visualizations_only():
    """Ex√©cute seulement les visualisations"""
    output_path = PROJECT_DIR / OUTPUT_DIR
    
    try:
        print_section_header("VISUALISATIONS SEULEMENT", level=1)
        
        data_handler = AlbedoDataHandler(CSV_PATH)
        data_handler.load_data()
        
        trend_calculator = TrendCalculator(data_handler)
        basic_results = trend_calculator.calculate_basic_trends(ANALYSIS_VARIABLE)
        monthly_results = trend_calculator.calculate_monthly_trends(ANALYSIS_VARIABLE)
        
        monthly_visualizer = MonthlyVisualizer(data_handler)
        
        monthly_graph_path = monthly_visualizer.create_monthly_statistics_graphs(
            ANALYSIS_VARIABLE, 
            str(output_path / f'monthly_statistics_{ANALYSIS_VARIABLE}.png')
        )
        
        if monthly_results:
            monthly_visualizer.create_seasonal_trends_comparison(
                monthly_results, ANALYSIS_VARIABLE,
                str(output_path / f'monthly_comparison_{ANALYSIS_VARIABLE}.png')
            )
        
        try:
            chart_generator = ChartGenerator(data_handler)
            chart_generator.create_trend_overview_graph(
                basic_results, ANALYSIS_VARIABLE,
                str(output_path / f'trend_overview_{ANALYSIS_VARIABLE}.png')
            )
            chart_generator.create_seasonal_patterns_graph(
                ANALYSIS_VARIABLE,
                str(output_path / f'seasonal_patterns_{ANALYSIS_VARIABLE}.png')
            )
        except:
            pass
        
        print("\n‚úÖ VISUALISATIONS TERMIN√âES !")
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERREUR : {e}")
        import traceback
        traceback.print_exc()
        return False

def run_pixels_only():
    """Ex√©cute seulement l'analyse des pixels"""
    output_path = PROJECT_DIR / OUTPUT_DIR
    
    try:
        print_section_header("ANALYSE PIXELS/QA SEULEMENT", level=1)
        
        data_handler = AlbedoDataHandler(CSV_PATH)
        data_handler.load_data()
        
        pixel_analyzer = PixelCountAnalyzer(data_handler, qa_csv_path=QA_CSV_PATH)
        monthly_pixel_results = pixel_analyzer.analyze_monthly_pixel_counts()
        true_qa_results = pixel_analyzer.analyze_true_qa_statistics()
        qa_results = pixel_analyzer.analyze_seasonal_qa_statistics()
        total_pixel_results = pixel_analyzer.analyze_total_pixel_trends()
        
        pixel_visualizer = PixelVisualizer(data_handler)
        
        if monthly_pixel_results:
            pixel_visualizer.create_monthly_pixel_count_plots(
                monthly_pixel_results,
                str(output_path / 'pixel_counts_by_month_fraction.png')
            )
        
        if true_qa_results:
            pixel_visualizer.create_true_qa_plots(
                true_qa_results,
                str(output_path / 'true_qa_scores_analysis.png')
            )
        
        if qa_results:
            pixel_visualizer.create_qa_statistics_plots(
                qa_results,
                str(output_path / 'qa_statistics_by_season.png')
            )
        
        pixel_analyzer.export_pixel_analysis_results(str(output_path))
        
        print("\n‚úÖ ANALYSE PIXELS/QA TERMIN√âE !")
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERREUR : {e}")
        import traceback
        traceback.print_exc()
        return False

def create_daily_albedo_plots(data_handler, output_dir):
    """
    Cr√©e des graphiques d'alb√©do quotidiens pour chaque ann√©e
    
    Args:
        data_handler: AlbedoDataHandler instance with loaded data
        output_dir (str): Directory to save the plots
        
    Returns:
        list: Paths to saved plots for each year
    """
    import matplotlib.pyplot as plt
    import pandas as pd
    
    print_section_header("Cr√©ation des graphiques d'alb√©do quotidiens", level=2)
    
    saved_plots = []
    data = data_handler.data
    years = sorted(data['year'].unique())
    
    print(f"üìÖ Ann√©es disponibles: {years}")
    
    for year in years:
        print(f"\nüéØ Cr√©ation du graphique d'alb√©do pour {year}")
        
        # Filtrer les donn√©es pour cette ann√©e (saison de fonte)
        year_data = data[
            (data['year'] == year) & 
            (data['month'].isin([6, 7, 8, 9]))
        ].copy()
        
        if len(year_data) == 0:
            print(f"‚ö†Ô∏è Pas de donn√©es pour {year}")
            continue
        
        # Trier par date
        year_data = year_data.sort_values('date')
        
        # Cr√©er le graphique
        fig, ax = plt.subplots(figsize=(14, 8))
        fig.suptitle(f'Alb√©do Quotidien - Saison de Fonte {year}', 
                     fontsize=16, fontweight='bold')
        
        # Tracer l'alb√©do pour chaque fraction
        for fraction in FRACTION_CLASSES:
            col_mean = f"{fraction}_{ANALYSIS_VARIABLE}"
            if col_mean in year_data.columns:
                albedo_data = year_data[col_mean].dropna()
                if len(albedo_data) > 0:
                    # Plot only non-null values
                    valid_data = year_data[year_data[col_mean].notna()]
                    ax.plot(valid_data['date'], valid_data[col_mean], 
                           marker='o', markersize=3, linewidth=1.5, alpha=0.8,
                           label=CLASS_LABELS[fraction],
                           color=FRACTION_COLORS.get(fraction, 'gray'))
        
        # Configuration du graphique
        ax.set_xlabel('Date')
        ax.set_ylabel(f'Alb√©do ({ANALYSIS_VARIABLE.capitalize()})')
        ax.set_ylim([0, 1])
        ax.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
        ax.grid(True, alpha=0.3)
        
        # Ajouter des lignes verticales pour s√©parer les mois
        for month in [7, 8, 9]:
            month_start = year_data[year_data['month'] == month]['date'].min()
            if not pd.isna(month_start):
                ax.axvline(x=month_start, color='gray', linestyle='--', alpha=0.5)
        
        # Statistiques
        stats_text = f"P√©riode: {year_data['date'].min().strftime('%Y-%m-%d')} √† {year_data['date'].max().strftime('%Y-%m-%d')}\n"
        stats_text += f"Observations: {len(year_data)} jours"
        ax.text(0.02, 0.98, stats_text, transform=ax.transAxes, 
                verticalalignment='top', fontsize=10,
                bbox=dict(boxstyle='round', facecolor='white', alpha=0.8))
        
        plt.tight_layout()
        
        # Sauvegarder
        save_path = os.path.join(output_dir, f'daily_albedo_melt_season_{year}.png')
        plt.savefig(save_path, dpi=300, bbox_inches='tight')
        plt.close()  # Close figure to free memory
        
        print(f"‚úÖ Graphique d'alb√©do {year} sauvegard√©: {save_path}")
        saved_plots.append(save_path)
    
    return saved_plots

def run_daily_only():
    """Ex√©cute seulement les graphiques quotidiens"""
    output_path = PROJECT_DIR / OUTPUT_DIR
    
    try:
        print_section_header("GRAPHIQUES QUOTIDIENS SEULEMENT", level=1)
        
        data_handler = AlbedoDataHandler(CSV_PATH)
        data_handler.load_data()
        
        # Graphiques quotidiens pixels/QA
        print_section_header("Graphiques quotidiens pixels/QA", level=2)
        pixel_analyzer = PixelCountAnalyzer(data_handler, qa_csv_path=QA_CSV_PATH)
        pixel_visualizer = PixelVisualizer(data_handler)
        
        daily_plots = pixel_visualizer.create_daily_melt_season_plots(
            pixel_analyzer, 
            str(output_path)
        )
        print(f"‚úÖ {len(daily_plots)} graphiques quotidiens pixels/QA cr√©√©s")
        
        # Graphiques quotidiens d'alb√©do
        albedo_plots = create_daily_albedo_plots(data_handler, str(output_path))
        print(f"‚úÖ {len(albedo_plots)} graphiques quotidiens d'alb√©do cr√©√©s")
        
        print(f"\n‚úÖ GRAPHIQUES QUOTIDIENS TERMIN√âS !")
        print(f"   üìä {len(daily_plots)} graphiques pixels/QA")
        print(f"   üìà {len(albedo_plots)} graphiques d'alb√©do")
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERREUR : {e}")
        import traceback
        traceback.print_exc()
        return False

def list_files(output_path):
    """Liste les fichiers g√©n√©r√©s"""
    files = list(output_path.glob('*'))
    if files:
        print(f"\nüìÅ {len(files)} fichiers dans {output_path}/:")
        for file in sorted(files):
            if file.is_file():
                size_kb = file.stat().st_size / 1024
                print(f"  ‚úÖ {file.name} ({size_kb:.1f} KB)")

def main():
    """Fonction principale simple pour VS Code"""
    print("\n" + "="*70)
    print("üöÄ SASKATCHEWAN GLACIER ALBEDO TREND ANALYSIS")
    print("="*70)
    print("üìÖ Session lanc√©e le:", datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
    
    print_config_summary()
    
    if not check_config():
        print("\n‚ùå Configuration invalide.")
        return
    
    while True:
        show_menu()
        choice = get_choice()
        
        if choice == 1:
            run_complete_analysis()
        elif choice == 2:
            run_trends_only()
        elif choice == 3:
            run_visualizations_only()
        elif choice == 4:
            run_pixels_only()
        elif choice == 5:
            run_daily_only()
        elif choice == 6:
            print("\nüëã Au revoir!")
            break
        
        print("\n" + "="*60)
        try:
            cont = input("‚û§ Continuer avec une autre analyse? (o/n): ").strip().lower()
            if cont not in ['o', 'oui', 'y', 'yes']:
                print("\nüëã Au revoir!")
                break
        except:
            break

if __name__ == "__main__":
    main()
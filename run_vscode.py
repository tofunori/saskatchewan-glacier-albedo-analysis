#!/usr/bin/env python3
"""
Script VS Code pour l'analyse des tendances d'alb√©do du glacier Saskatchewan
==========================================================================

Ce script est optimis√© pour l'ex√©cution interactive dans VS Code.
Il effectue EXACTEMENT les m√™mes analyses que run_analysis.py.

Pour utiliser :
1. Configurez le chemin de votre fichier CSV ci-dessous
2. Appuyez sur F5 ou cliquez "Run" dans VS Code
3. Consultez les r√©sultats dans analysis_output/
"""

import os
import sys
from pathlib import Path

# Configuration du projet
print("üöÄ SASKATCHEWAN ALBEDO TREND ANALYSIS - VS CODE")
print("="*60)

# Ajouter le r√©pertoire du projet au path
project_dir = Path(__file__).parent
sys.path.insert(0, str(project_dir))

# ==========================================
# CONFIGURATION - MODIFIEZ ICI VOTRE CHEMIN
# ==========================================

# Chemin vers votre fichier CSV (utilisez r"" pour les chemins Windows)
CSV_PATH = r"D:\Downloads\daily_albedo_mann_kendall_ready_2010_2024.csv"

# R√©pertoire de sortie pour les r√©sultats
OUTPUT_DIR = "analysis_output_vscode"

# Variable √† analyser ('mean' ou 'median')
VARIABLE = "mean"

# ==========================================

def main():
    """
    Fonction principale - M√äMES analyses que le script original
    """
    print(f"üìä Fichier CSV : {CSV_PATH}")
    print(f"üìÅ Sortie : {OUTPUT_DIR}")
    print(f"üîç Variable : {VARIABLE}")
    print()
    
    # V√©rifier que le fichier existe
    if not os.path.exists(CSV_PATH):
        print(f"‚ùå ERREUR : Fichier CSV non trouv√© !")
        print(f"   Chemin recherch√© : {CSV_PATH}")
        print()
        print("üí° SOLUTION :")
        print("   Modifiez la variable CSV_PATH dans ce script avec le chemin correct")
        print("   Exemple : CSV_PATH = r'C:\\votre\\chemin\\vers\\fichier.csv'")
        return False
    
    print(f"‚úÖ Fichier CSV trouv√© : {CSV_PATH}")
    print()
    
    # Test rapide des modules
    print("‚ö° Test des modules...")
    try:
        from trend_analysis.config import FRACTION_CLASSES
        from trend_analysis.utils import print_section_header
        
        print_section_header("Modules charg√©s avec succ√®s", level=2)
        print(f"‚úÖ Fractions configur√©es : {len(FRACTION_CLASSES)}")
        print(f"‚úÖ Classes : {FRACTION_CLASSES}")
        print()
        
    except Exception as e:
        print(f"‚ùå ERREUR d'import des modules : {e}")
        print()
        print("üí° SOLUTIONS :")
        print("   1. Assurez-vous d'√™tre dans le bon r√©pertoire")
        print("   2. V√©rifiez que le dossier trend_analysis/ existe")
        print("   3. Installez les d√©pendances : pip install pandas numpy matplotlib seaborn scipy scikit-learn")
        return False
    
    # ANALYSE COMPL√àTE - IDENTIQUE au script original
    print("üî¨ Lancement de l'analyse compl√®te...")
    print("   Ceci peut prendre quelques minutes...")
    print()
    
    try:
        # Import de la fonction principale
        from trend_analysis.main import run_complete_analysis
        
        # M√äME analyse que dans run_analysis.py
        results = run_complete_analysis(
            csv_path=CSV_PATH,
            output_dir=OUTPUT_DIR,
            variable=VARIABLE
        )
        
        if results:
            print()
            print("üéâ ANALYSE TERMIN√âE AVEC SUCC√àS !")
            print("="*50)
            print(f"üìÅ Tous les r√©sultats sont dans : {OUTPUT_DIR}/")
            print()
            
            # Afficher les fichiers g√©n√©r√©s
            if 'files_generated' in results:
                print("üìÑ Fichiers g√©n√©r√©s :")
                for file_info in results['files_generated']:
                    print(f"   ‚úÖ {file_info['description']} : {file_info['path']}")
                    if 'size_kb' in file_info:
                        print(f"      Taille : {file_info['size_kb']} KB")
                print()
            
            # R√©sum√© des r√©sultats
            if 'basic_trends' in results:
                basic_results = results['basic_trends']
                significant_count = sum(1 for r in basic_results.values() 
                                      if not r.get('error', False) and r['mann_kendall']['p_value'] < 0.05)
                total_count = sum(1 for r in basic_results.values() if not r.get('error', False))
                
                print("üìä R√âSUM√â DES TENDANCES :")
                print(f"   ‚Ä¢ Fractions analys√©es : {total_count}")
                print(f"   ‚Ä¢ Tendances significatives : {significant_count}")
                
                if significant_count > 0:
                    print("   ‚Ä¢ Fractions avec tendances significatives :")
                    for fraction, result in basic_results.items():
                        if not result.get('error', False) and result['mann_kendall']['p_value'] < 0.05:
                            trend = result['mann_kendall']['trend']
                            p_val = result['mann_kendall']['p_value']
                            slope = result['sen_slope']['slope_per_decade']
                            print(f"     - {result['label']} : {trend} (p={p_val:.4f}, {slope:.6f}/d√©cennie)")
                print()
            
            print("üéØ GRAPHIQUES PRINCIPAUX √Ä CONSULTER :")
            print("   üìä monthly_statistics_mean.png - VOS GRAPHIQUES MENSUELS")
            print("   üìà trend_overview_mean.png - Vue d'ensemble des tendances")
            print("   üé® dashboard_summary_mean.png - Dashboard complet")
            print("   üìÑ Rapport texte complet avec toutes les statistiques")
            print()
            print("‚ú® Analyse compl√®te termin√©e ! Consultez les fichiers g√©n√©r√©s.")
            return True
            
        else:
            print("‚ùå √âCHEC de l'analyse compl√®te")
            return False
            
    except Exception as e:
        print(f"‚ùå ERREUR lors de l'analyse : {e}")
        print()
        print("üí° SOLUTIONS POSSIBLES :")
        print("   1. V√©rifiez le format de votre fichier CSV")
        print("   2. Assurez-vous que toutes les d√©pendances sont install√©es")
        print("   3. V√©rifiez l'espace disque disponible")
        
        import traceback
        print("\nüîç D√©tails de l'erreur :")
        traceback.print_exc()
        return False

def show_configuration():
    """
    Affiche la configuration actuelle
    """
    print("‚öôÔ∏è  CONFIGURATION ACTUELLE :")
    print("-" * 30)
    print(f"Fichier CSV : {CSV_PATH}")
    print(f"R√©pertoire de sortie : {OUTPUT_DIR}")
    print(f"Variable analys√©e : {VARIABLE}")
    print(f"R√©pertoire de travail : {Path.cwd()}")
    print()

if __name__ == "__main__":
    # Afficher la configuration
    show_configuration()
    
    # Lancer l'analyse principale
    success = main()
    
    if success:
        print("üéä SUCC√àS ! Votre analyse est termin√©e.")
        print("üìÇ Ouvrez le dossier de sortie pour voir tous les r√©sultats.")
    else:
        print("üíî √âCHEC de l'analyse.")
        print("üìû Consultez les messages d'erreur ci-dessus pour le d√©pannage.")
    
    print("\n" + "="*60)
    print("Script termin√©. Vous pouvez fermer cette fen√™tre.")
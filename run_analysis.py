#!/usr/bin/env python3
"""
Script simple pour ex√©cuter l'analyse des tendances d'alb√©do
===========================================================

Ce script √©vite les probl√®mes d'imports relatifs en utilisant
le package trend_analysis comme un module normal.
"""

import os
import sys
from pathlib import Path

# Ajouter le r√©pertoire parent au path pour importer le package
project_dir = Path(__file__).parent
sys.path.insert(0, str(project_dir))

def main():
    """
    Fonction principale pour ex√©cuter l'analyse
    """
    print("üöÄ SASKATCHEWAN ALBEDO TREND ANALYSIS")
    print("="*50)
    
    # Chemin vers vos donn√©es (modifiez selon votre fichier)
    csv_files = [
        "daily_albedo_by_fraction_optimized.csv",
        "data.csv",
        # Ajoutez d'autres noms possibles ici
    ]
    
    csv_path = None
    for filename in csv_files:
        if os.path.exists(filename):
            csv_path = filename
            break
    
    if csv_path is None:
        print("‚ùå Aucun fichier CSV trouv√©!")
        print("Fichiers recherch√©s:")
        for f in csv_files:
            print(f"  - {f}")
        print("\nVeuillez:")
        print("1. Placer votre fichier CSV dans le r√©pertoire courant")
        print("2. Ou modifier la liste csv_files dans ce script")
        return False
    
    print(f"‚úÖ Fichier CSV trouv√©: {csv_path}")
    
    # Option 1: Analyse compl√®te (recommand√©e)
    print("\nüî¨ Option 1: Analyse compl√®te")
    try:
        from trend_analysis.main import run_complete_analysis
        
        results = run_complete_analysis(
            csv_path=csv_path,
            output_dir='analysis_output',
            variable='mean'
        )
        
        if results:
            print("‚úÖ Analyse compl√®te r√©ussie!")
            return True
        else:
            print("‚ùå √âchec de l'analyse compl√®te")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors de l'analyse compl√®te: {e}")
        print("\nEssai avec l'analyse √©tape par √©tape...")
        
        # Option 2: Analyse √©tape par √©tape
        return run_step_by_step_analysis(csv_path)

def run_step_by_step_analysis(csv_path):
    """
    Analyse √©tape par √©tape en cas de probl√®me avec l'analyse compl√®te
    """
    print("\nüß© Option 2: Analyse √©tape par √©tape")
    
    try:
        # Import des modules individuels
        from trend_analysis.data_loader import SaskatchewanDataLoader
        from trend_analysis.basic_trends import BasicTrendAnalyzer
        from trend_analysis.seasonal_analysis import SeasonalAnalyzer
        
        print("üìä Chargement des donn√©es...")
        data_loader = SaskatchewanDataLoader(csv_path)
        data_loader.load_data()
        data_loader.print_data_summary()
        
        print("\nüìà Analyses de tendances de base...")
        basic_analyzer = BasicTrendAnalyzer(data_loader)
        basic_results = basic_analyzer.calculate_trends('mean')
        basic_analyzer.print_summary('mean')
        
        print("\nüìÖ Analyses saisonni√®res...")
        seasonal_analyzer = SeasonalAnalyzer(data_loader)
        monthly_results = seasonal_analyzer.analyze_monthly_trends('mean')
        
        # Cr√©er les graphiques de statistiques mensuelles
        print("\nüé® Cr√©ation des graphiques mensuels...")
        monthly_graph = seasonal_analyzer.create_monthly_statistics_graphs('mean')
        if monthly_graph:
            print(f"‚úÖ Graphiques mensuels cr√©√©s: {monthly_graph}")
        
        print("\n‚úÖ Analyse √©tape par √©tape r√©ussie!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'analyse √©tape par √©tape: {e}")
        import traceback
        traceback.print_exc()
        return False

def run_quick_test():
    """
    Test rapide pour v√©rifier que les modules fonctionnent
    """
    print("\n‚ö° Test rapide des modules...")
    
    try:
        # Tester les imports
        from trend_analysis.config import FRACTION_CLASSES
        from trend_analysis.utils import print_section_header
        
        print_section_header("Test des imports", level=2)
        print(f"‚úÖ Fractions configur√©es: {len(FRACTION_CLASSES)}")
        print(f"‚úÖ Classes: {FRACTION_CLASSES}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    # Test rapide d'abord
    if not run_quick_test():
        print("‚ùå √âchec du test rapide - probl√®me avec les modules")
        sys.exit(1)
    
    # Analyse principale
    success = main()
    
    if success:
        print("\nüéâ Analyse termin√©e avec succ√®s!")
        print("üìÅ Consultez les fichiers g√©n√©r√©s dans le r√©pertoire courant")
    else:
        print("\n‚ùå √âchec de l'analyse")
        print("üí° Suggestions:")
        print("  - V√©rifiez que toutes les d√©pendances sont install√©es:")
        print("    pip install pandas numpy matplotlib seaborn scipy scikit-learn")
        print("  - V√©rifiez le format de votre fichier CSV")
        print("  - Consultez les messages d'erreur ci-dessus")
        
        sys.exit(1)
"""
Chargement et pr√©paration des donn√©es d'alb√©do
=============================================

Ce module g√®re le chargement, le nettoyage et la pr√©paration des donn√©es
CSV export√©es depuis Google Earth Engine.
"""

import pandas as pd
import numpy as np
import os
from .config import FRACTION_CLASSES, CLASS_LABELS, ANALYSIS_CONFIG
from .utils import print_section_header, validate_data

class SaskatchewanDataLoader:
    """
    Classe pour charger et pr√©parer les donn√©es d'alb√©do du glacier Saskatchewan
    """
    
    def __init__(self, csv_path):
        """
        Initialise le chargeur de donn√©es
        
        Args:
            csv_path (str): Chemin vers le fichier CSV
        """
        self.csv_path = csv_path
        self.data = None
        self.raw_data = None
        self.fraction_classes = FRACTION_CLASSES
        self.class_labels = CLASS_LABELS
        
    def load_data(self):
        """
        Charge et pr√©pare les donn√©es CSV
        
        Returns:
            self: Pour cha√Ænage des m√©thodes
            
        Raises:
            FileNotFoundError: Si le fichier CSV n'existe pas
            ValueError: Si les colonnes requises sont manquantes
        """
        print_section_header("Chargement des donn√©es", level=2)
        
        # V√©rifier l'existence du fichier
        if not os.path.exists(self.csv_path):
            raise FileNotFoundError(f"Fichier non trouv√©: {self.csv_path}")
        
        # Charger le CSV
        try:
            self.raw_data = pd.read_csv(self.csv_path)
            self.data = self.raw_data.copy()
            print(f"‚úì Fichier charg√©: {len(self.data)} lignes, {len(self.data.columns)} colonnes")
        except Exception as e:
            raise ValueError(f"Erreur lors du chargement du CSV: {e}")
        
        # Pr√©parer les donn√©es
        self._prepare_temporal_data()
        self._filter_quality_data()
        self._add_seasonal_variables()
        self._validate_required_columns()
        
        print(f"‚úì Donn√©es pr√©par√©es: {len(self.data)} observations valides")
        print(f"‚úì P√©riode: {self.data['date'].min()} √† {self.data['date'].max()}")
        
        return self
    
    def _prepare_temporal_data(self):
        """
        Pr√©pare les variables temporelles
        """
        # Convertir la date
        if 'date' in self.data.columns:
            self.data['date'] = pd.to_datetime(self.data['date'])
        else:
            raise ValueError("Colonne 'date' manquante dans les donn√©es")
        
        # Ajouter les variables temporelles si elles n'existent pas
        if 'year' not in self.data.columns:
            self.data['year'] = self.data['date'].dt.year
        
        if 'month' not in self.data.columns:
            self.data['month'] = self.data['date'].dt.month
        
        if 'doy' not in self.data.columns:
            self.data['doy'] = self.data['date'].dt.dayofyear
        
        if 'decimal_year' not in self.data.columns:
            self.data['decimal_year'] = self.data['year'] + (self.data['doy'] - 1) / 365.25
    
    def _filter_quality_data(self):
        """
        Filtre les donn√©es selon les crit√®res de qualit√©
        """
        initial_count = len(self.data)
        
        # Filtrer selon le seuil minimum de pixels si disponible
        if 'min_pixels_threshold' in self.data.columns:
            self.data = self.data[self.data['min_pixels_threshold'] == True]
            filtered_count = len(self.data)
            print(f"‚úì Filtre qualit√© appliqu√©: {filtered_count}/{initial_count} observations gard√©es")
        
        # Supprimer les lignes avec toutes les valeurs d'alb√©do manquantes
        albedo_columns = []
        for fraction in self.fraction_classes:
            for var in ['mean', 'median']:
                col = f'{fraction}_{var}'
                if col in self.data.columns:
                    albedo_columns.append(col)
        
        if albedo_columns:
            # Garder les lignes avec au moins une valeur d'alb√©do valide
            self.data = self.data.dropna(subset=albedo_columns, how='all')
            print(f"‚úì Lignes sans donn√©es d'alb√©do supprim√©es: {len(self.data)} observations restantes")
    
    def _add_seasonal_variables(self):
        """
        Ajoute des variables saisonni√®res
        """
        # Saison simplifi√©e (early/mid/late summer)
        self.data['season'] = self.data['month'].map({
            6: 'early_summer',
            7: 'early_summer', 
            8: 'mid_summer',
            9: 'late_summer'
        })
        
        # Label de saison plus d√©taill√©
        self.data['season_label'] = self.data['month'].map({
            6: 'D√©but √©t√©',
            7: 'D√©but √©t√©',
            8: 'Mi-√©t√©', 
            9: 'Fin √©t√©'
        })
        
        # Mois comme cat√©gorie pour analyses
        self.data['month_cat'] = self.data['month'].astype('category')
    
    def _validate_required_columns(self):
        """
        Valide que les colonnes requises sont pr√©sentes
        """
        required_columns = ['date', 'year', 'month', 'doy', 'decimal_year']
        missing_columns = [col for col in required_columns if col not in self.data.columns]
        
        if missing_columns:
            raise ValueError(f"Colonnes requises manquantes: {missing_columns}")
        
        # V√©rifier qu'au moins une fraction a des donn√©es d'alb√©do
        has_albedo_data = False
        for fraction in self.fraction_classes:
            for var in ['mean', 'median']:
                col = f'{fraction}_{var}'
                if col in self.data.columns and not self.data[col].isna().all():
                    has_albedo_data = True
                    break
            if has_albedo_data:
                break
        
        if not has_albedo_data:
            raise ValueError("Aucune donn√©e d'alb√©do valide trouv√©e")
    
    def get_data_summary(self):
        """
        Retourne un r√©sum√© des donn√©es charg√©es
        
        Returns:
            dict: R√©sum√© des donn√©es
        """
        if self.data is None:
            return {"error": "Donn√©es non charg√©es"}
        
        summary = {
            'total_observations': len(self.data),
            'date_range': {
                'start': self.data['date'].min(),
                'end': self.data['date'].max()
            },
            'years_covered': sorted(self.data['year'].unique()),
            'months_covered': sorted(self.data['month'].unique()),
            'fractions_available': []
        }
        
        # V√©rifier les fractions disponibles
        for fraction in self.fraction_classes:
            fraction_data = {}
            for var in ['mean', 'median']:
                col = f'{fraction}_{var}'
                if col in self.data.columns:
                    valid_count = self.data[col].notna().sum()
                    fraction_data[var] = {
                        'available': True,
                        'valid_observations': int(valid_count),
                        'missing_percentage': (1 - valid_count/len(self.data)) * 100
                    }
                else:
                    fraction_data[var] = {'available': False}
            
            summary['fractions_available'].append({
                'fraction': fraction,
                'label': self.class_labels[fraction],
                'data': fraction_data
            })
        
        return summary
    
    def print_data_summary(self):
        """
        Affiche un r√©sum√© d√©taill√© des donn√©es
        """
        summary = self.get_data_summary()
        
        print_section_header("R√©sum√© des donn√©es", level=2)
        print(f"üìä Observations totales: {summary['total_observations']}")
        print(f"üìÖ P√©riode: {summary['date_range']['start'].strftime('%Y-%m-%d')} ‚Üí {summary['date_range']['end'].strftime('%Y-%m-%d')}")
        print(f"üóìÔ∏è  Ann√©es: {len(summary['years_covered'])} ann√©es ({min(summary['years_covered'])}-{max(summary['years_covered'])})")
        print(f"üìÜ Mois: {summary['months_covered']}")
        
        print("\nüìä Disponibilit√© des donn√©es par fraction:")
        for fraction_info in summary['fractions_available']:
            label = fraction_info['label']
            mean_data = fraction_info['data']['mean']
            median_data = fraction_info['data']['median']
            
            print(f"\n  {label}:")
            if mean_data['available']:
                print(f"    Mean: {mean_data['valid_observations']} obs ({mean_data['missing_percentage']:.1f}% manquant)")
            if median_data['available']:
                print(f"    Median: {median_data['valid_observations']} obs ({median_data['missing_percentage']:.1f}% manquant)")
    
    def get_fraction_data(self, fraction, variable='mean', dropna=True):
        """
        Retourne les donn√©es pour une fraction et variable sp√©cifiques
        
        Args:
            fraction (str): Nom de la fraction
            variable (str): Variable √† extraire ('mean' ou 'median')
            dropna (bool): Supprimer les valeurs manquantes
            
        Returns:
            pd.DataFrame: Donn√©es filtr√©es avec colonnes 'date', 'decimal_year', 'value'
        """
        if self.data is None:
            raise ValueError("Donn√©es non charg√©es. Appeler load_data() d'abord.")
        
        col_name = f"{fraction}_{variable}"
        
        if col_name not in self.data.columns:
            raise ValueError(f"Colonne {col_name} non trouv√©e")
        
        # S√©lectionner les colonnes pertinentes
        result = self.data[['date', 'decimal_year', col_name]].copy()
        result = result.rename(columns={col_name: 'value'})
        
        if dropna:
            result = result.dropna(subset=['value'])
        
        return result
    
    def export_cleaned_data(self, output_path=None):
        """
        Exporte les donn√©es nettoy√©es vers un nouveau CSV
        
        Args:
            output_path (str, optional): Chemin de sortie. Si None, g√©n√®re automatiquement.
        """
        if self.data is None:
            raise ValueError("Donn√©es non charg√©es")
        
        if output_path is None:
            base_name = os.path.splitext(os.path.basename(self.csv_path))[0]
            output_path = f"{base_name}_cleaned.csv"
        
        self.data.to_csv(output_path, index=False)
        print(f"‚úì Donn√©es nettoy√©es export√©es: {output_path}")
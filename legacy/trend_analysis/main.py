"""
Point d'entr√©e principal pour l'analyse compl√®te des tendances d'alb√©do
=====================================================================

Ce module orchestre toutes les analyses et g√©n√®re les rapports finaux
pour l'√©tude des tendances d'alb√©do du glacier Saskatchewan.
"""

import os
import sys
from datetime import datetime
from pathlib import Path

# G√©rer les imports relatifs et absolus
try:
    # Import relatif (quand utilis√© comme module)
    from .data_loader import SaskatchewanDataLoader
    from .basic_trends import BasicTrendAnalyzer
    from .seasonal_analysis import SeasonalAnalyzer
    from .visualizations import AlbedoVisualizer
    from .utils import print_section_header, ensure_directory_exists
except ImportError:
    # Import absolu (quand ex√©cut√© directement)
    current_dir = Path(__file__).parent
    sys.path.insert(0, str(current_dir))
    
    from data_loader import SaskatchewanDataLoader
    from basic_trends import BasicTrendAnalyzer
    from seasonal_analysis import SeasonalAnalyzer
    from visualizations import AlbedoVisualizer
    from utils import print_section_header, ensure_directory_exists

def run_complete_analysis(csv_path, output_dir='analysis_output', variable='mean'):
    """
    Ex√©cute l'analyse compl√®te des tendances d'alb√©do
    
    Args:
        csv_path (str): Chemin vers le fichier CSV des donn√©es
        output_dir (str): R√©pertoire de sortie pour les r√©sultats
        variable (str): Variable √† analyser ('mean' ou 'median')
        
    Returns:
        dict: R√©sultats complets de l'analyse
    """
    print_section_header("ANALYSE COMPL√àTE DES TENDANCES D'ALB√âDO", level=1)
    print(f"üìä Fichier d'entr√©e: {csv_path}")
    print(f"üìÅ R√©pertoire de sortie: {output_dir}")
    print(f"üîç Variable analys√©e: {variable}")
    
    # Cr√©er le r√©pertoire de sortie
    ensure_directory_exists(os.path.join(output_dir, 'temp'))
    
    # √âTAPE 1: Chargement des donn√©es
    print_section_header("√âTAPE 1: Chargement et pr√©paration des donn√©es", level=1)
    
    try:
        data_loader = SaskatchewanDataLoader(csv_path)
        data_loader.load_data()
        data_loader.print_data_summary()
    except Exception as e:
        print(f"‚ùå Erreur lors du chargement des donn√©es: {e}")
        return None
    
    # √âTAPE 2: Analyses de tendances de base
    print_section_header("√âTAPE 2: Analyses de tendances de base", level=1)
    
    try:
        basic_analyzer = BasicTrendAnalyzer(data_loader)
        basic_results = basic_analyzer.calculate_trends(variable)
        basic_analyzer.print_summary(variable)
        
        # Sauvegarder le tableau de r√©sum√© de base
        summary_table = basic_analyzer.get_summary_table(variable)
        summary_path = os.path.join(output_dir, f'basic_trends_summary_{variable}.csv')
        summary_table.to_csv(summary_path, index=False)
        print(f"‚úì Tableau de r√©sum√© sauvegard√©: {summary_path}")
        
    except Exception as e:
        print(f"‚ùå Erreur lors des analyses de base: {e}")
        return None
    
    # √âTAPE 3: Analyses saisonni√®res et mensuelles
    print_section_header("√âTAPE 3: Analyses saisonni√®res et mensuelles", level=1)
    
    try:
        seasonal_analyzer = SeasonalAnalyzer(data_loader)
        monthly_results = seasonal_analyzer.analyze_monthly_trends(variable)
        seasonal_analyzer.print_seasonal_summary(variable)
        
        # Cr√©er les graphiques de statistiques mensuelles demand√©s
        monthly_graph_path = seasonal_analyzer.create_monthly_statistics_graphs(
            variable, os.path.join(output_dir, f'monthly_statistics_{variable}.png')
        )
        
        # Graphique de comparaison saisonni√®re
        seasonal_graph_path = seasonal_analyzer.create_seasonal_comparison_graph(
            variable, os.path.join(output_dir, f'seasonal_comparison_{variable}.png')
        )
        
        # Sauvegarder le tableau mensuel
        monthly_table = seasonal_analyzer.get_monthly_summary_table(variable)
        monthly_path = os.path.join(output_dir, f'monthly_trends_summary_{variable}.csv')
        monthly_table.to_csv(monthly_path, index=False)
        print(f"‚úì Tableau mensuel sauvegard√©: {monthly_path}")
        
    except Exception as e:
        print(f"‚ùå Erreur lors des analyses saisonni√®res: {e}")
        monthly_results = {}
    
    # √âTAPE 4: Visualisations principales
    print_section_header("√âTAPE 4: Cr√©ation des visualisations", level=1)
    
    try:
        visualizer = AlbedoVisualizer(data_loader)
        
        # Graphique d'aper√ßu des tendances
        overview_path = visualizer.create_trend_overview_graph(
            basic_results, variable, os.path.join(output_dir, f'trend_overview_{variable}.png')
        )
        
        # Matrice de corr√©lation
        correlation_path = visualizer.create_correlation_matrix_graph(
            variable, os.path.join(output_dir, f'correlation_matrix_{variable}.png')
        )
        
        # Patterns saisonniers
        patterns_path = visualizer.create_seasonal_patterns_graph(
            variable, os.path.join(output_dir, f'seasonal_patterns_{variable}.png')
        )
        
        # Dashboard de r√©sum√©
        dashboard_path = visualizer.create_summary_dashboard(
            basic_results, variable, os.path.join(output_dir, f'dashboard_summary_{variable}.png')
        )
        
        # S√©ries temporelles d√©taill√©es pour chaque fraction
        timeseries_paths = []
        for fraction in data_loader.fraction_classes:
            try:
                ts_path = visualizer.create_time_series_graph(
                    fraction, variable, 
                    os.path.join(output_dir, f'timeseries_{fraction}_{variable}.png')
                )
                if ts_path:
                    timeseries_paths.append(ts_path)
            except Exception as e:
                print(f"‚ö†Ô∏è  Impossible de cr√©er la s√©rie temporelle pour {fraction}: {e}")
        
    except Exception as e:
        print(f"‚ùå Erreur lors des visualisations: {e}")
        overview_path = None
    
    # √âTAPE 5: Compilation des r√©sultats
    print_section_header("√âTAPE 5: Compilation des r√©sultats finaux", level=1)
    
    results = {
        'metadata': {
            'analysis_date': datetime.now().isoformat(),
            'csv_path': csv_path,
            'output_dir': output_dir,
            'variable': variable,
            'data_summary': data_loader.get_data_summary()
        },
        'basic_trends': basic_results,
        'monthly_trends': monthly_results,
        'files_generated': []
    }
    
    # Lister tous les fichiers g√©n√©r√©s
    generated_files = [
        ('R√©sum√© tendances de base', summary_path if 'summary_path' in locals() else None),
        ('R√©sum√© tendances mensuelles', monthly_path if 'monthly_path' in locals() else None),
        ('Graphiques statistiques mensuelles', monthly_graph_path if 'monthly_graph_path' in locals() else None),
        ('Comparaison saisonni√®re', seasonal_graph_path if 'seasonal_graph_path' in locals() else None),
        ('Aper√ßu des tendances', overview_path if 'overview_path' in locals() else None),
        ('Matrice de corr√©lation', correlation_path if 'correlation_path' in locals() else None),
        ('Patterns saisonniers', patterns_path if 'patterns_path' in locals() else None),
        ('Dashboard r√©sum√©', dashboard_path if 'dashboard_path' in locals() else None)
    ]
    
    # Ajouter les s√©ries temporelles
    if 'timeseries_paths' in locals():
        for i, ts_path in enumerate(timeseries_paths):
            generated_files.append((f'S√©rie temporelle {i+1}', ts_path))
    
    # Filtrer les fichiers existants et afficher
    print("üìÅ Fichiers g√©n√©r√©s:")
    for description, file_path in generated_files:
        if file_path and os.path.exists(file_path):
            print(f"  ‚úì {description}: {file_path}")
            results['files_generated'].append({
                'description': description,
                'path': file_path,
                'size_kb': round(os.path.getsize(file_path) / 1024, 1)
            })
        elif file_path:
            print(f"  ‚ùå {description}: {file_path} (introuvable)")
    
    # R√©sum√© final
    print_section_header("ANALYSE TERMIN√âE", level=1)
    print(f"‚úÖ Analyse compl√®te termin√©e avec succ√®s")
    print(f"üìä Variable analys√©e: {variable}")
    print(f"üìÅ {len(results['files_generated'])} fichiers g√©n√©r√©s dans: {output_dir}")
    print(f"‚è±Ô∏è  Dur√©e totale: {datetime.now().strftime('%H:%M:%S')}")
    
    # Afficher un r√©sum√© des tendances significatives
    significant_trends = []
    for fraction, result in basic_results.items():
        if not result.get('error', False):
            mk = result['mann_kendall']
            if mk['p_value'] < 0.05:
                significant_trends.append(f"  üìä {result['label']}: {mk['trend']} (p={mk['p_value']:.4f})")
    
    if significant_trends:
        print(f"\nüéØ Tendances significatives d√©tect√©es:")
        for trend in significant_trends:
            print(trend)
    else:
        print(f"\n‚û°Ô∏è  Aucune tendance significative d√©tect√©e au seuil p < 0.05")
    
    return results

def run_quick_analysis(csv_path, variable='mean'):
    """
    Ex√©cute une analyse rapide sans sauvegarder les graphiques
    
    Args:
        csv_path (str): Chemin vers le fichier CSV
        variable (str): Variable √† analyser
        
    Returns:
        dict: R√©sultats de base
    """
    print_section_header("ANALYSE RAPIDE DES TENDANCES D'ALB√âDO", level=1)
    
    # Chargement des donn√©es
    data_loader = SaskatchewanDataLoader(csv_path)
    data_loader.load_data()
    
    # Analyses de base seulement
    basic_analyzer = BasicTrendAnalyzer(data_loader)
    basic_results = basic_analyzer.calculate_trends(variable)
    basic_analyzer.print_summary(variable)
    
    return {
        'basic_trends': basic_results,
        'summary_table': basic_analyzer.get_summary_table(variable)
    }

def analyze_single_fraction(csv_path, fraction, variable='mean', save_graphs=False):
    """
    Analyse une seule fraction en d√©tail
    
    Args:
        csv_path (str): Chemin vers le fichier CSV
        fraction (str): Fraction √† analyser
        variable (str): Variable √† analyser
        save_graphs (bool): Sauvegarder les graphiques
        
    Returns:
        dict: R√©sultats pour cette fraction
    """
    print_section_header(f"ANALYSE D√âTAILL√âE - {fraction.upper()}", level=1)
    
    # Chargement des donn√©es
    data_loader = SaskatchewanDataLoader(csv_path)
    data_loader.load_data()
    
    # Analyse de base
    basic_analyzer = BasicTrendAnalyzer(data_loader)
    basic_results = basic_analyzer.calculate_trends(variable)
    
    if fraction not in basic_results:
        print(f"‚ùå Fraction {fraction} non trouv√©e dans les r√©sultats")
        return None
    
    result = basic_results[fraction]
    
    # Affichage d√©taill√©
    print(f"\nüìä R√©sultats pour {result['label']}:")
    print(f"  ‚Ä¢ Observations: {result['n_obs']}")
    print(f"  ‚Ä¢ Tendance: {result['mann_kendall']['trend']}")
    print(f"  ‚Ä¢ P-value: {result['mann_kendall']['p_value']:.6f}")
    print(f"  ‚Ä¢ Pente Sen: {result['sen_slope']['slope_per_decade']:.6f}/d√©cennie")
    
    # Graphiques optionnels
    if save_graphs:
        visualizer = AlbedoVisualizer(data_loader)
        ts_path = visualizer.create_time_series_graph(fraction, variable)
        print(f"‚úì S√©rie temporelle sauvegard√©e: {ts_path}")
    
    return result

if __name__ == "__main__":
    # Exemple d'utilisation
    import sys
    
    if len(sys.argv) < 2:
        print("Usage: python main.py <csv_path> [output_dir] [variable]")
        sys.exit(1)
    
    csv_path = sys.argv[1]
    output_dir = sys.argv[2] if len(sys.argv) > 2 else 'analysis_output'
    variable = sys.argv[3] if len(sys.argv) > 3 else 'mean'
    
    results = run_complete_analysis(csv_path, output_dir, variable)
    
    if results:
        print(f"\n‚úÖ Analyse termin√©e. R√©sultats dans: {output_dir}")
    else:
        print(f"\n‚ùå √âchec de l'analyse")
        sys.exit(1)